from datetime import datetime
import os
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot import dp, bot
from .keyboard import account_keyboard
from .db import DataBase
from .savehtml import save_html


def decline_word(n):
    days = ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π']

    if n % 10 == 1 and n % 100 != 11:
        p = 0
    elif 2 <= n % 10 <= 4 and (n % 100 < 10 or n % 100 >= 20):
        p = 1
    else:
        p = 2
    return str(n) + ' ' + days[p]


def get_month(n):
    month = [
        '—è–Ω–≤–∞—Ä—è',
        '—Ñ–µ–≤—Ä–∞–ª—è',
        '–º–∞—Ä—Ç–∞',
        '–∞–ø—Ä–µ–ª—è',
        '–º–∞—è',
        '–∏—é–Ω—è',
        '–∏—é–ª—è',
        '–∞–≤–≥—É—Å—Ç–∞',
        '—Å–µ–Ω—Ç—è–±—Ä—è',
        '–æ–∫—Ç—è–±—Ä—è',
        '–Ω–æ—è–±—Ä—è',
        '–¥–µ–∫–∞–±—Ä—è',
    ]
    return month[n]


@dp.callback_query_handler(text='account')
async def cmdaccount(call: types.CallbackQuery):
    user_id = call.message.chat.id
    async with DataBase() as db:
        user = await db.read('users', where=f'user_id={user_id}')
        user = user[0]
    date_created = user['date_created'].strftime('%d.%m.%Y')
    now_date = datetime.now()
    date_diff = now_date - user['date_created']
    date_diff = date_diff.days if date_diff.days > 0 else 1
    balance = user['balance']
    count_requests = user['count_requests']
    msg = '<b>–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç</b>\n'
    msg += '<i>–í—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ</i>\n\n'
    msg += f'üëÅ‚Äçüó® <b>ID</b>: <code> {user_id}</code>\n'
    msg += f'üëÅ‚Äçüó® <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>: <code> {date_created} ({decline_word(date_diff)})</code>\n\n'

    msg += f'üí∂ <b>–ú–æ–π –∫–æ—à–µ–ª—ë–∫</b>: <code> {balance}‚ÇΩ</code>\n\n'

    msg += f'üîé <b>–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤</b>:\n'
    msg += f'<b>‚îî –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:</b> <code> {count_requests}</code>\n'

    await call.message.edit_text(msg, reply_markup=account_keyboard(), parse_mode=types.ParseMode.HTML)


@dp.callback_query_handler(text="operations")
async def operations(call: types.CallbackQuery):
    user_id = call.message.chat.id
    message_id = call.message.message_id
    async with DataBase() as db:
        operations = await db.read('payment', where=f'user_id={user_id}')

    if not operations:
        await call.answer('‚õîÔ∏è –û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', show_alert=True)
        return

    grouped_items = {}
    for item in operations:
        date = item['date_created'].strftime('%d.%m.%Y')
        if date in grouped_items:
            grouped_items[date].append(item)
        else:
            grouped_items[date] = [item]

    msg = '<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</b>\n'
    msg += '<i>–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –í–∞–º–∏ –æ–ø–µ—Ä–∞—Ü–∏–π</i>\n'
    msg += '<i>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"</i>\n\n'
    count = 0
    for item_date in grouped_items:
        if count == 10:
            break
        msg += '<b>{}</b>\n'.format(item_date)
        for item in grouped_items[item_date]:
            if count == 10:
                break
            status_map = {
                'paid': '<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞</b>',
                'pending': '<b>–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã</b>',
                'cancelled': '<b>–û—Ç–º–µ–Ω–∞</b>'
            }
            status = '–°—Ç–∞—Ç—É—Å: {}'.format(status_map.get(item['status'], ''))
            time = item['date_created'].strftime('%H:%M')
            msg += '[{}] {}\n'.format(time, status)
            count += 1
        msg += '\n'
    inline_btn_1 = InlineKeyboardButton(
        '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏', callback_data='all_operations')
    back = InlineKeyboardButton(
        'üîô –ù–∞–∑–∞–¥', callback_data='back_account')
    inline_kb1 = InlineKeyboardMarkup().row(inline_btn_1).add(back)
    await bot.edit_message_text(msg, call.message.chat.id, message_id, reply_markup=inline_kb1, parse_mode=types.ParseMode.HTML)


@dp.callback_query_handler(text="all_operations")
async def all_operations(call: types.CallbackQuery):
    user_id = call.message.chat.id
    async with DataBase() as db:
        operations = await db.read('payment', where=f'user_id={user_id}')

    if not operations:
        await call.answer('‚õîÔ∏è –û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', show_alert=True)
        return

    grouped_items = {}
    for item in operations:
        date_str = item["date_created"].strftime("%d.%m.%Y")
        if date_str not in grouped_items:
            grouped_items[date_str] = []
        grouped_items[date_str].append(item)

    doc = save_html(grouped_items)
    cancel = InlineKeyboardButton('‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback_data='cancel')
    inline_kb1 = InlineKeyboardMarkup().row(cancel)

    await call.message.delete()
    await bot.send_document(
        user_id,
        open(doc, 'rb'),
        caption='üìÅ –û—Ç–≤–µ—Ç –Ω–∞ <b>–í–∞—à –∑–∞–ø—Ä–æ—Å</b> –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞ HTML',
        reply_markup=inline_kb1,
        parse_mode=types.ParseMode.HTML
    )
    os.remove(doc)


@dp.callback_query_handler(text="cancel")
async def cancel(call: types.CallbackQuery):
    await call.message.delete()
